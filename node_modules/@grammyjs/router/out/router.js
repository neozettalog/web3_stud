"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Router = void 0;
const deps_node_js_1 = require("./deps.node.js");
/**
 * A router lets you specify a number of middlewares, each of them identified by
 * a string key. You can then pass a routing function that decides based on the
 * context which middleware to choose by returning one of the keys.
 *
 * ```ts
 * const router = new Router(ctx => {
 *   // determine route to pick here
 *   return 'key'
 * })
 *
 * router.route('key',       ctx => { ... })
 * router.route('other-key', ctx => { ... })
 * router.otherwise(ctx => { ... }) // called if no route matches
 *
 * bot.use(router)
 * ```
 *
 * If you use a [custom context
 * type](https://grammy.dev/guide/context.html#customizing-the-context-object)
 * for your bot, you need to pass it when constructing the `Router` instance,
 * too.
 *
 * ```ts
 * const router = new Router<MyContext>(ctx => { ... })
 * ```
 */
class Router {
    /**
     * Constructs a router with a routing function and optionally some
     * preinstalled middlewares. Note that you can always install more
     * middleware on the router by calling `route`.
     *
     * @param router A routing function that decides which middleware to run
     * @param routeHandlers A number of middlewares
     */
    constructor(router, routeHandlers = {}) {
        this.router = router;
        this.routeHandlers = routeHandlers instanceof Map
            ? Object.fromEntries(routeHandlers.entries())
            : { ...routeHandlers };
    }
    /**
     * Registers new middleware for a given route. The intially supplied routing
     * function may return this route as a string to select the respective
     * middleware for execution for an incoming update.
     *
     * @param route The route for which to register the middleware
     * @param middleware The middleware to register
     */
    route(route, ...middleware) {
        const composer = new deps_node_js_1.Composer(...middleware);
        this.routeHandlers[route] = composer;
        return composer;
    }
    /**
     * Allows to register middleware that is executed when no route matches, or
     * when the routing function returns `undefined`. If this method is not
     * called, then the router will simply pass through all requests to the
     * downstream middleware.
     *
     * @param middleware Middleware to run if no route matches
     */
    otherwise(...middleware) {
        return this.otherwiseHandler = new deps_node_js_1.Composer(...middleware);
    }
    middleware() {
        return new deps_node_js_1.Composer().route((ctx) => this.router(ctx), this.routeHandlers, this.otherwiseHandler).middleware();
    }
}
exports.Router = Router;
